#!/usr/bin/env python3
"""
Lanceur S√©curis√© pour GlobalExam AI
===================================

Ce lanceur utilise le nouveau syst√®me de s√©curit√© v4 qui vous donne
un contr√¥le total sur qui peut utiliser l'application.

Fonctionnalit√©s :
- AUCUN CODE visible √† l'utilisateur
- Contr√¥le serveur (vous approuvez/refusez)
- Logs de toutes les utilisations
- R√©vocation d'acc√®s √† distance
- Pas de mode hors ligne (s√©curit√© renforc√©e)

Auteur : Projet √âtudiant
"""

import sys
import os
from pathlib import Path

# Ajouter les chemins n√©cessaires
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def show_welcome():
    """Afficher le message d'accueil avec logo"""
    try:
        # Essayer d'afficher le logo ASCII
        logo_path = Path(__file__).parent / "assets" / "logo.txt"
        if logo_path.exists():
            with open(logo_path, 'r', encoding='utf-8') as f:
                print(f.read())
        else:
            # Fallback si pas de logo
            print("="*80)
            print("üöÄ GLOBALEXAM AI - SYST√àME S√âCURIS√â v4 üöÄ")
            print("="*80)
    except:
        # Fallback en cas d'erreur
        print("="*60)
        print("GLOBALEXAM AI - SYST√àME S√âCURIS√â v4")
        print("="*60)
    
    print()
    print("üîí S√©curit√© : Contr√¥le serveur (aucun code visible)")
    print("ü§ñ Intelligence : OCR + Analyse IA")
    print("üéØ Automatisation : Clics adaptatifs")
    print("üõ°Ô∏è Fiabilit√© : Syst√®mes de secours multiples")
    print("="*80)
    print()

def launch_control_panel():
    """Lancer le panneau de contr√¥le avec protection par code"""
    
    # Demander le code d'acc√®s
    print("üîê ACC√àS PANNEAU DE CONTR√îLE")
    print("="*40)
    print("Ce panneau est r√©serv√© au propri√©taire de l'application.")
    
    try:
        access_code = input("Entrez le code d'acc√®s : ").strip()
        
        # V√©rifier le code (configur√© par le propri√©taire)
        OWNER_ACCESS_CODE = "YOUR_SECRET_CODE_HERE"  # √Ä changer par le propri√©taire
        
        if access_code != OWNER_ACCESS_CODE:
            print("‚ùå Code d'acc√®s incorrect !")
            print("Acc√®s refus√© au panneau de contr√¥le.")
            return False
        
        print("‚úÖ Code correct - Acc√®s autoris√©")
        print()
        
    except KeyboardInterrupt:
        print("\n‚ùå Acc√®s annul√©")
        return False
    
    # Lancer le panneau de contr√¥le
    try:
        from control_panel import ControlPanel
        
        print("üéõÔ∏è Lancement du panneau de contr√¥le...")
        print("Vous pouvez maintenant :")
        print("‚Ä¢ Approuver/refuser des utilisateurs")
        print("‚Ä¢ Voir les logs d'utilisation")
        print("‚Ä¢ R√©voquer l'acc√®s √† distance")
        print("‚Ä¢ D√©marrer un serveur local pour tests")
        print()
        
        app = ControlPanel()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import du panneau de contr√¥le : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur du panneau de contr√¥le : {e}")
        return False

def launch_main_app():
    """Lancer l'application principale"""
    try:
        from main_application import GlobalExamAI
        
        print("üöÄ Lancement de l'application principale...")
        print("L'application va maintenant demander l'autorisation...")
        print()
        
        # Cr√©er et lancer l'application
        app = GlobalExamAI("GlobalExamAI")
        result = app.run_automation()
        
        # Afficher les r√©sultats
        if 'error' in result:
            print(f"\n‚ùå Erreur : {result['error']}")
        else:
            print(f"\n‚úÖ Automation termin√©e avec succ√®s")
            print(f"Questions tent√©es : {result.get('questions_attempted', 0)}")
            print(f"Questions r√©ussies : {result.get('questions_successful', 0)}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import de l'application : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur de l'application : {e}")
        return False

def test_security_system():
    """Tester le syst√®me de s√©curit√©"""
    try:
        from security_system_v4 import ServerControlledSecurity
        
        print("üß™ Test du syst√®me de s√©curit√©...")
        
        security = ServerControlledSecurity("TestApp")
        authorized = security.check_authorization()
        
        if authorized:
            print("‚úÖ Test de s√©curit√© r√©ussi - acc√®s autoris√©")
            session_info = security.get_session_info()
            if session_info:
                print(f"Utilisateur : {session_info['user_id']}")
                print(f"Mode : {session_info.get('mode', 'online')}")
        else:
            print("‚ùå Test de s√©curit√© - acc√®s refus√©")
        
        return authorized
        
    except Exception as e:
        print(f"‚ùå Erreur du test de s√©curit√© : {e}")
        return False

def test_adaptive_clicking():
    """Tester le syst√®me de clics adaptatifs"""
    try:
        # Import depuis le r√©pertoire parent
        sys.path.insert(0, str(Path(__file__).parent.parent))
        from test_adaptive_system import main as test_main
        
        print("üéØ Lancement du test de clics adaptatifs...")
        test_main()
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import du test adaptatif : {e}")
    except Exception as e:
        print(f"‚ùå Erreur du test adaptatif : {e}")

def main():
    """Menu principal"""
    show_welcome()
    
    while True:
        print("OPTIONS DISPONIBLES :")
        print("1. üöÄ Lancer l'application principale")
        print("2. üéõÔ∏è Ouvrir le panneau de contr√¥le (propri√©taire)")
        print("3. üß™ Tester le syst√®me de s√©curit√©")
        print("4. üéØ Tester les clics adaptatifs")
        print("5. ‚ùì Aide et informations")
        print("6. üö™ Quitter")
        
        try:
            choice = input("\nS√©lectionnez une option (1-6) : ").strip()
            
            if choice == '1':
                print("\n" + "="*50)
                launch_main_app()
                
            elif choice == '2':
                print("\n" + "="*50)
                launch_control_panel()
                
            elif choice == '3':
                print("\n" + "="*50)
                test_security_system()
                
            elif choice == '4':
                print("\n" + "="*50)
                test_adaptive_clicking()
                
            elif choice == '5':
                show_help()
                
            elif choice == '6':
                print("\nüëã Au revoir !")
                break
                
            else:
                print("‚ùå Choix invalide. Veuillez s√©lectionner 1-6.")
            
            print("\n" + "="*50)
            
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir !")
            break
        except Exception as e:
            print(f"‚ùå Erreur : {e}")

def show_help():
    """Afficher l'aide"""
    print("\n" + "="*60)
    print("AIDE - GLOBALEXAM AI v4")
    print("="*60)
    
    print("\nüîí SYST√àME DE S√âCURIT√â :")
    print("‚Ä¢ Aucun code visible √† l'utilisateur")
    print("‚Ä¢ Vous contr√¥lez qui peut utiliser l'app")
    print("‚Ä¢ Approbation/refus depuis le panneau de contr√¥le")
    print("‚Ä¢ Logs de toutes les utilisations")
    print("‚Ä¢ R√©vocation d'acc√®s instantan√©e")
    print("‚Ä¢ Pas de mode hors ligne (s√©curit√© renforc√©e)")
    
    print("\nüéØ SYST√àME DE CLICS ADAPTATIFS :")
    print("‚Ä¢ D√©tecte automatiquement le type de question")
    print("‚Ä¢ S'adapte aux positions dynamiques des r√©ponses")
    print("‚Ä¢ Fonctionne avec tous les types de questions :")
    print("  - Vrai/Faux (positions fixes)")
    print("  - Choix multiples (positions fixes)")
    print("  - Remake phrase (positions dynamiques)")
    print("  - Remplir blancs (champs dynamiques)")
    
    print("\nüéõÔ∏è PANNEAU DE CONTR√îLE :")
    print("‚Ä¢ Voir les demandes d'acc√®s en temps r√©el")
    print("‚Ä¢ Approuver/refuser des utilisateurs")
    print("‚Ä¢ √âtendre ou r√©voquer des sessions")
    print("‚Ä¢ Consulter les logs d'utilisation")
    print("‚Ä¢ Serveur local pour tests")
    print("‚Ä¢ Prot√©g√© par code d'acc√®s propri√©taire")
    
    print("\nüìû UTILISATION :")
    print("1. Configurez votre code d'acc√®s dans le script")
    print("2. D√©marrez le panneau de contr√¥le (option 2)")
    print("3. L'utilisateur lance l'app (option 1)")
    print("4. Vous recevez une demande d'acc√®s")
    print("5. Vous approuvez ou refusez")
    print("6. L'utilisateur peut utiliser l'app si approuv√©")
    
    print("\nüîß CONFIGURATION :")
    print("‚Ä¢ Changez YOUR_SECRET_CODE_HERE par votre code")
    print("‚Ä¢ Configurez les URLs de serveur si n√©cessaire")
    print("‚Ä¢ Ajustez les coordonn√©es de clic si besoin")
    
    print("\nüîß D√âPANNAGE :")
    print("‚Ä¢ Si les clics ne fonctionnent pas : testez option 4")
    print("‚Ä¢ Si la s√©curit√© ne fonctionne pas : testez option 3")
    print("‚Ä¢ V√©rifiez que tous les modules sont install√©s")
    print("‚Ä¢ Consultez les logs dans le panneau de contr√¥le")

if __name__ == "__main__":
    main()
