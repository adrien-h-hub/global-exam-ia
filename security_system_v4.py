#!/usr/bin/env python3
"""
Syst√®me de S√©curit√© v4 pour GlobalExam AI - Contr√¥le Serveur
===========================================================

Ce syst√®me vous donne un contr√¥le total sur qui peut utiliser l'application :

1. AUCUN CODE VISIBLE dans l'application
2. Authentification par serveur distant (vous contr√¥lez)
3. Vous pouvez activer/d√©sactiver des utilisateurs √† distance
4. Sessions temporaires avec expiration
5. Logs de qui utilise l'application et quand

Fonctionnement :
- L'utilisateur entre son nom/email
- L'app contacte votre serveur pour v√©rification
- Vous approuvez ou refusez depuis votre panneau de contr√¥le
- Aucun code n'est affich√© √† l'utilisateur

Auteur : Projet √âtudiant
Objectif : Contr√¥le total de l'acc√®s √† l'application
"""

import hashlib
import json
import os
import time
import uuid
import getpass
import platform
import requests
import threading
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import messagebox, simpledialog

class ServerControlledSecurity:
    """
    Syst√®me de s√©curit√© contr√¥l√© par serveur
    
    Vous gardez le contr√¥le total :
    - Approuvez/refusez les utilisateurs depuis votre serveur
    - Aucun code visible dans l'application
    - Logs de toutes les utilisations
    - R√©vocation instantan√©e d'acc√®s
    """
    
    def __init__(self, app_name: str = "GlobalExamAI"):
        """
        Initialise le syst√®me de s√©curit√© contr√¥l√© par serveur
        
        Args:
            app_name: Nom de l'application
        """
        self.app_name = app_name
        self.config_dir = self._get_config_directory()
        self.session_file = os.path.join(self.config_dir, 'session.dat')
        
        # Configuration serveur global
        self.server_config = {
            'auth_url': 'https://globalia.herokuapp.com/api/auth',  # Votre serveur global
            'check_url': 'https://globalia.herokuapp.com/api/check',  # Votre serveur global
            'log_url': 'https://globalia.herokuapp.com/api/log',     # Votre serveur global
            'local_server': 'http://localhost:8080',  # Serveur local pour tests
            'fallback_mode': False  # Mode hors ligne D√âSACTIV√â
        }
        
        # Informations syst√®me (pour identification)
        self.system_info = {
            'username': getpass.getuser(),
            'computer_name': platform.node(),
            'system': platform.system(),
            'app_version': '4.0',
            'timestamp': datetime.now().isoformat()
        }
        
        # S'assurer que le r√©pertoire existe
        os.makedirs(self.config_dir, exist_ok=True)
        
        print(f"[S√âCURIT√â] Syst√®me de contr√¥le serveur initialis√©")
        print(f"[S√âCURIT√â] Utilisateur : {self.system_info['username']}")
        print(f"[S√âCURIT√â] Ordinateur : {self.system_info['computer_name']}")
    
    def _get_config_directory(self) -> str:
        """Obtenir le r√©pertoire de configuration"""
        if os.name == 'nt':  # Windows
            base_dir = os.getenv('APPDATA', os.path.expanduser('~'))
        else:  # Linux/Mac
            base_dir = os.path.expanduser('~/.config')
        
        return os.path.join(base_dir, self.app_name)
    
    def request_access(self) -> bool:
        """
        Demande l'acc√®s au serveur (AUCUN CODE VISIBLE)
        
        Returns:
            True si l'acc√®s est accord√©
        """
        print("\n" + "="*60)
        print("GLOBALEXAM AI - DEMANDE D'ACC√àS")
        print("="*60)
        print("Cette application n√©cessite une autorisation.")
        print("Aucun code ne sera affich√© - tout est contr√¥l√© par le propri√©taire.")
        print("="*60)
        
        try:
            # Demander les informations utilisateur
            user_info = self._get_user_info()
            if not user_info:
                return False
            
            # Tenter l'authentification serveur
            if self._try_server_auth(user_info):
                return True
            
            # Pas de mode fallback - serveur requis
            print("[S√âCURIT√â] ‚úó Serveur requis pour l'authentification")
            print("[S√âCURIT√â] Contactez le propri√©taire pour l'acc√®s")
            
            return False
            
        except Exception as e:
            print(f"[ERREUR] Demande d'acc√®s √©chou√©e : {e}")
            return False
    
    def _get_user_info(self) -> Optional[Dict[str, str]]:
        """
        Obtenir les informations utilisateur (interface graphique)
        
        Returns:
            Dictionnaire avec les infos utilisateur ou None
        """
        try:
            # Cr√©er une fen√™tre simple pour saisie
            root = tk.Tk()
            root.withdraw()  # Cacher la fen√™tre principale
            
            # Demander le nom/email
            user_id = simpledialog.askstring(
                "GlobalExam AI - Identification",
                "Entrez votre nom ou email :\n\n(Le propri√©taire recevra une demande d'autorisation)",
                parent=root
            )
            
            if not user_id or not user_id.strip():
                root.destroy()
                return None
            
            # Demander une raison (optionnel)
            reason = simpledialog.askstring(
                "GlobalExam AI - Raison",
                "Raison d'utilisation (optionnel) :",
                parent=root
            ) or "Non sp√©cifi√©e"
            
            root.destroy()
            
            return {
                'user_id': user_id.strip(),
                'reason': reason.strip(),
                'request_time': datetime.now().isoformat(),
                'system_info': self.system_info
            }
            
        except Exception as e:
            print(f"[ERREUR] Saisie utilisateur √©chou√©e : {e}")
            return None
    
    def _try_server_auth(self, user_info: Dict[str, str]) -> bool:
        """
        Tenter l'authentification via serveur
        
        Args:
            user_info: Informations utilisateur
            
        Returns:
            True si authentifi√© par le serveur
        """
        print("[SERVEUR] Connexion au serveur d'authentification...")
        
        # Liste des serveurs √† essayer
        servers_to_try = [
            self.server_config['local_server'] + '/api/auth',  # Serveur local d'abord
            self.server_config['auth_url']  # Puis serveur global
        ]
        
        for server_url in servers_to_try:
            try:
                print(f"[SERVEUR] Tentative : {server_url}")
                
                # Pr√©parer la requ√™te
                auth_data = {
                    'app_name': self.app_name,
                    'user_info': user_info,
                    'request_type': 'access_request'
                }
                
                # Envoyer la requ√™te (timeout court)
                response = requests.post(
                    server_url,
                    json=auth_data,
                    timeout=5,
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    if result.get('access_granted'):
                        # Sauvegarder la session
                        session_data = {
                            'user_id': user_info['user_id'],
                            'session_token': result.get('session_token'),
                            'expires_at': result.get('expires_at'),
                            'granted_at': datetime.now().isoformat()
                        }
                        
                        self._save_session(session_data)
                        
                        print(f"[SERVEUR] ‚úì Acc√®s accord√© par {server_url}")
                        return True
                    else:
                        reason = result.get('reason', 'Acc√®s refus√©')
                        print(f"[SERVEUR] ‚úó Acc√®s refus√© par {server_url} : {reason}")
                        continue  # Essayer le serveur suivant
                else:
                    print(f"[SERVEUR] ‚úó Erreur serveur {server_url} : {response.status_code}")
                    continue  # Essayer le serveur suivant
                    
            except requests.exceptions.Timeout:
                print(f"[SERVEUR] ‚è±Ô∏è Timeout - {server_url} non disponible")
                continue  # Essayer le serveur suivant
            except requests.exceptions.ConnectionError:
                print(f"[SERVEUR] üîå Impossible de se connecter √† {server_url}")
                continue  # Essayer le serveur suivant
            except Exception as e:
                print(f"[SERVEUR] ‚ùå Erreur avec {server_url} : {e}")
                continue  # Essayer le serveur suivant
        
        # Aucun serveur n'a fonctionn√©
        print("[SERVEUR] ‚úó Aucun serveur disponible")
        return False
    
    
    def _save_session(self, session_data: Dict[str, Any]) -> bool:
        """
        Sauvegarder la session de mani√®re s√©curis√©e
        
        Args:
            session_data: Donn√©es de session
            
        Returns:
            True si sauvegard√© avec succ√®s
        """
        try:
            # Chiffrer les donn√©es de session
            session_json = json.dumps(session_data, indent=2)
            
            # Simple obfuscation (vous pouvez am√©liorer)
            key = hashlib.sha256(f"{self.app_name}{getpass.getuser()}".encode()).digest()
            encrypted_data = bytearray()
            
            for i, byte in enumerate(session_json.encode('utf-8')):
                encrypted_data.append(byte ^ key[i % len(key)])
            
            # Sauvegarder
            with open(self.session_file, 'wb') as f:
                f.write(encrypted_data)
            
            print(f"[SESSION] Session sauvegard√©e")
            return True
            
        except Exception as e:
            print(f"[SESSION] Sauvegarde √©chou√©e : {e}")
            return False
    
    def _load_session(self) -> Optional[Dict[str, Any]]:
        """
        Charger la session existante
        
        Returns:
            Donn√©es de session si valides, None sinon
        """
        try:
            if not os.path.exists(self.session_file):
                return None
            
            # Charger et d√©chiffrer
            with open(self.session_file, 'rb') as f:
                encrypted_data = f.read()
            
            key = hashlib.sha256(f"{self.app_name}{getpass.getuser()}".encode()).digest()
            decrypted_data = bytearray()
            
            for i, byte in enumerate(encrypted_data):
                decrypted_data.append(byte ^ key[i % len(key)])
            
            # Parser JSON
            session_json = decrypted_data.decode('utf-8')
            session_data = json.loads(session_json)
            
            return session_data
            
        except Exception as e:
            print(f"[SESSION] Chargement √©chou√© : {e}")
            return None
    
    def _is_session_valid(self, session: Dict[str, Any]) -> bool:
        """
        V√©rifier si la session est encore valide
        
        Args:
            session: Donn√©es de session
            
        Returns:
            True si la session est valide
        """
        try:
            expires_at = datetime.fromisoformat(session['expires_at'])
            return datetime.now() < expires_at
        except:
            return False
    
    
    def check_authorization(self) -> bool:
        """
        V√©rifier l'autorisation d'utilisation
        
        Il s'agit de la fonction principale appel√©e par l'application
        
        Returns:
            True si autoris√© √† utiliser l'application
        """
        try:
            print("\n[AUTORISATION] V√©rification de l'acc√®s...")
            
            # V√©rifier session existante
            session = self._load_session()
            if session and self._is_session_valid(session):
                print(f"[AUTORISATION] ‚úì Session valide pour {session['user_id']}")
                
                # V√©rifier avec le serveur (requis)
                if self._verify_with_server(session):
                    return True
                else:
                    print("[AUTORISATION] ‚úó Impossible de v√©rifier avec le serveur")
                    print("[AUTORISATION] Session locale expir√©e - nouvelle demande requise")
                    
                    # Supprimer la session invalide
                    self.revoke_session()
                    return False
            
            # Pas de session valide - demander l'acc√®s
            print("[AUTORISATION] Aucune session valide - demande d'acc√®s requise")
            return self.request_access()
            
        except Exception as e:
            print(f"[AUTORISATION] V√©rification √©chou√©e : {e}")
            return False
    
    def _verify_with_server(self, session: Dict[str, Any]) -> bool:
        """
        V√©rifier la session avec le serveur
        
        Args:
            session: Donn√©es de session
            
        Returns:
            True si la session est confirm√©e par le serveur
        """
        try:
            check_data = {
                'session_token': session['session_token'],
                'user_id': session['user_id'],
                'app_name': self.app_name
            }
            
            response = requests.post(
                self.server_config['check_url'],
                json=check_data,
                timeout=5
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('session_valid', False)
            
        except:
            pass  # √âchec silencieux - utiliser session locale
        
        return False
    
    def revoke_session(self) -> bool:
        """
        R√©voquer la session actuelle
        
        Returns:
            True si r√©voqu√© avec succ√®s
        """
        try:
            if os.path.exists(self.session_file):
                os.remove(self.session_file)
                print("[SESSION] Session r√©voqu√©e")
                return True
            return True
        except Exception as e:
            print(f"[SESSION] R√©vocation √©chou√©e : {e}")
            return False
    
    def get_session_info(self) -> Optional[Dict[str, Any]]:
        """
        Obtenir les informations de session actuelle
        
        Returns:
            Informations de session ou None
        """
        session = self._load_session()
        if session and self._is_session_valid(session):
            return {
                'user_id': session.get('user_id'),
                'granted_at': session.get('granted_at'),
                'expires_at': session.get('expires_at'),
                'mode': session.get('mode', 'online')
            }
        return None

# Exemple d'utilisation et test
if __name__ == "__main__":
    print("Module Syst√®me de S√©curit√© v4 - Mode Test")
    print("="*50)
    
    # Cr√©er le gestionnaire de s√©curit√©
    security = ServerControlledSecurity("TestApp")
    
    # Test d'autorisation
    authorized = security.check_authorization()
    
    if authorized:
        print("\n‚úÖ ACC√àS AUTORIS√â")
        session_info = security.get_session_info()
        if session_info:
            print(f"Utilisateur : {session_info['user_id']}")
            print(f"Mode : {session_info['mode']}")
            print(f"Expire : {session_info['expires_at']}")
    else:
        print("\n‚ùå ACC√àS REFUS√â")
    
    print("\nTest du syst√®me de s√©curit√© termin√© !")
